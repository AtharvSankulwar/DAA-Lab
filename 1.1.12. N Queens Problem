#include <stdio.h>

int countSolutions = 0;

// Function to check if placing a queen is safe
bool isSafe(int board[MAX][MAX], int row, int col, int n) {
    int i, j;

    // Check column
    for (i = 0; i < row; i++)
        if (board[i][col]) return false;

    // Check upper-left diagonal
    for (i = row, j = col; i >= 0 && j >= 0; i--, j--)
        if (board[i][j]) return false;

    // Check upper-right diagonal
    for (i = row, j = col; i >= 0 && j < n; i--, j++)
        if (board[i][j]) return false;

    return true;
}

// Recursive backtracking
void solveNQueen(int board[MAX][MAX], int row, int n) {
    if (row == n) {
        countSolutions++;
        return;
    }

    for (int col = 0; col < n; col++) {
        if (isSafe(board, row, col, n)) {
            board[row][col] = 1;
            solveNQueen(board, row + 1, n);
            board[row][col] = 0;  // backtrack
        }
    }
}

// Main function to return number of solutions
int nQueen(int n) {
    if (n < 2 || n > 10) {
        // Outside given constraint
        return -1; 
    }

    int board[MAX][MAX] = {0};
    countSolutions = 0;
    solveNQueen(board, 0, n);
    return countSolutions;
}

int main() {
    int n;
    scanf("%d", &n);

    int result = nQueen(n);

    if (result == -1) {
        printf("Out of range (2 <= n <= 10)\n");
    } else {
        printf("%d\n", result);
    }

    return 0;
}
