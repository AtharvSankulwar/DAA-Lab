#include <stdio.h>

#define MAX_N 1001
#define MAX_W 1001

int max(int a, int b) {
    return (a > b) ? a : b;
}

int knapsack(int val[], int wt[], int N, int W) {
    int dp[MAX_N][MAX_W];

    // Initialize the dp table with 0
    for (int i = 0; i <= N; i++) {
        for (int w = 0; w <= W; w++) {
            if (i == 0 || w == 0)
                dp[i][w] = 0;
            else if (wt[i - 1] <= w)
                dp[i][w] = max(val[i - 1] + dp[i - 1][w - wt[i - 1]], dp[i - 1][w]);
            else
                dp[i][w] = dp[i - 1][w];
        }
    }

    return dp[N][W];
}

int main() {
    int N, W;
    int val[MAX_N], wt[MAX_N];

    // Input N
    scanf("%d", &N);

    // Input values
    for (int i = 0; i < N; i++) {
        scanf("%d", &val[i]);
    }

    // Input weights
    for (int i = 0; i < N; i++) {
        scanf("%d", &wt[i]);
    }

    // Input knapsack capacity W
    scanf("%d", &W);

    // Call the knapsack function and print the result
    int result = knapsack(val, wt, N, W);
    printf("%d\n", result);

    return 0;
}

